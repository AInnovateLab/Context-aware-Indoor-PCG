"""
Handle arguments for train/test scripts.

The MIT License (MIT)
Originally created at 5/25/20, for Python 3.x
Copyright (c) 2020 Panos Achlioptas (pachlioptas@gmail.com) & Ahmed (@gmail.com)
"""

import argparse
import json
import os.path as osp
import pprint
from argparse import ArgumentParser
from datetime import datetime

from data.utils import create_dir, str2bool

from .logger import get_logger


def parse_arguments(notebook_options=None):
    """
    Parse the arguments for the training (or test) execution of a ReferIt3D net.

    Args:
        notebook_options (list): e.g., ['--max-distractors', '100'] to give/parse arguments from inside a jupyter notebook.
    """
    parser = argparse.ArgumentParser(description="Instruct-Insertion")

    ################################
    #                              #
    #    Non-optional arguments    #
    #                              #
    ################################
    parser.add_argument(
        "--scannet-file",
        type=str,
        required=True,
        help=".pkl file containing the data of Scannet as generated by running `prepare_scannet_data.py`",
    )
    parser.add_argument("--referit3D-file", type=str, required=True, help="Nr3D/Sr3D csv file.")

    ####################################
    #                                  #
    #    I/O file-related arguments    #
    #                                  #
    ####################################
    parser.add_argument(
        "--project-top-dir",
        required=True,
        type=str,
        help="Where to save training-states, model, logs, etc for each project",
    )
    parser.add_argument(
        "--project-name",
        required=True,
        type=str,
        help="Name of the project. Used to name the logs and tensorboards.",
    )
    parser.add_argument("--config-file", type=str, default=None, help="config file")

    ####################################
    #                                  #
    #    Dataset-oriented arguments    #
    #                                  #
    ####################################
    parser.add_argument(
        "--max-context-objects",
        type=int,
        default=50,
        help="Maximum number of context objects in the scene.",
    )
    parser.add_argument(
        "--max-seq-len",
        type=int,
        default=64,
        help="utterances with more tokens than this they will be ignored.",
    )
    parser.add_argument(
        "--points-per-object",
        type=int,
        default=1024,
        help="points sampled to make a point-cloud per object of a scan.",
    )

    parser.add_argument(
        "--unit-sphere-norm",
        type=str2bool,
        default=True,
        help="Normalize each point-cloud to be in a unit sphere.",
    )
    parser.add_argument(
        "--mentions-target-class-only",
        type=str2bool,
        default=True,
        help="If True, drop references that do not explicitly mention the target-class.",
    )
    parser.add_argument(
        "--height-append",
        type=str2bool,
        default=True,
        help="If True, append height to the floor as the 7th channel of point-clouds.",
    )

    ############################
    #                          #
    #    Training arguments    #
    #                          #
    ############################
    parser.add_argument("--mode", type=str, default="train", choices=["train", "test", "vis"])
    parser.add_argument(
        "--max-train-epochs",
        type=int,
        default=100,
        help="number of training epochs. [default: 100]",
    )
    parser.add_argument(
        "--batch-size", type=int, default=16, help="batch size per gpu. [default: 32]"
    )
    parser.add_argument(
        "--n-workers",
        type=int,
        default=8,
        help="number of data loading workers [default: -1 is all cores available -1.]",
    )
    parser.add_argument(
        "--random-seed",
        type=int,
        default=2020,
        help="Control pseudo-randomness (net-wise, point-cloud sampling etc.) fostering reproducibility.",
    )
    parser.add_argument(
        "--init-lr", type=float, default=0.0005, help="init & max learning rate for training."
    )
    parser.add_argument(
        "--min-lr", type=float, default=0.00005, help="min learning rate for training."
    )
    parser.add_argument("--lr-sched", type=str, default="linear", help="lr scheduler type.")
    parser.add_argument(
        "--resume-path",
        type=str,
        default=None,
        help="path to a checkpoint **folder** to resume training from.",
    )

    #########################
    #                       #
    #    Model arguments    #
    #                       #
    #########################
    parser.add_argument(
        "--mvt-model",
        type=str,
        default="referIt3DNet_transformer",
        choices=[
            "referIt3DNet_transformer",
        ],
    )
    parser.add_argument(
        "--bert-pretrain-path",
        type=str,
        default="bert-base-uncased",
        help="path to pretrained bert model. Check huggingface hub for more models.",
    )

    parser.add_argument("--view-number", type=int, default=4)
    parser.add_argument("--rotate-number", type=int, default=4)

    parser.add_argument("--label-lang-sup", type=str2bool, default=True)
    parser.add_argument("--aggregate-type", type=str, default="avg")

    parser.add_argument("--encoder-layer-num", type=int, default=3)
    parser.add_argument("--decoder-layer-num", type=int, default=4)
    parser.add_argument("--decoder-nhead-num", type=int, default=8)

    parser.add_argument("--object-latent-dim", type=int, default=768)
    parser.add_argument("--inner-dim", type=int, default=768)

    parser.add_argument("--dropout-rate", type=float, default=0.15)
    parser.add_argument(
        "--lang-cls-alpha",
        type=float,
        default=0.5,
        help="if > 0 a loss for guessing the target via " "language only is added.",
    )
    parser.add_argument(
        "--obj-cls-alpha",
        type=float,
        default=0.5,
        help="if > 0 a loss for guessing for each segmented" " object its class type is added.",
    )

    parser.add_argument("--point-e-model", type=str, default="base40M-textvec")

    ########################
    #                      #
    #    Misc arguments    #
    #                      #
    ########################
    parser.add_argument(
        "--save-args", type=str2bool, default=True, help="save arguments in a json.txt"
    )

    ######################################
    #                                    #
    #    "Joint" (Sr3d+Nr3D) training    #
    #                                    #
    ######################################
    parser.add_argument(
        "--augment-with-sr3d",
        type=str,
        default=None,
        help="csv with sr3d data to augment training data" "of args.referit3D-file",
    )
    parser.add_argument(
        "--fine-tune",
        type=str2bool,
        default=False,
        help="use if you train with dataset x and then you "
        "continue training with another dataset",
    )
    parser.add_argument(
        "--s-vs-n-weight",
        type=float,
        default=None,
        help="importance weight of sr3d vs nr3d examples [use less than 1]",
    )

    #####################################################
    #  _______                                          #
    # /       \                                         #
    # $$$$$$$  | ______    ______    _______   ______   #
    # $$ |__$$ |/      \  /      \  /       | /      \  #
    # $$    $$/ $$$$$$  |/$$$$$$  |/$$$$$$$/ /$$$$$$  | #
    # $$$$$$$/  /    $$ |$$ |  $$/ $$      \ $$    $$ | #
    # $$ |     /$$$$$$$ |$$ |       $$$$$$  |$$$$$$$$/  #
    # $$ |     $$    $$ |$$ |      /     $$/ $$       | #
    # $$/       $$$$$$$/ $$/       $$$$$$$/   $$$$$$$/  #
    #                                                   #
    #####################################################
    if notebook_options is not None:
        args = parser.parse_args(notebook_options)
    else:
        args = parser.parse_args()

    assert args.max_context_objects >= 1, "max_context_objects must be >= 1"

    if args.config_file is not None:
        with open(args.config_file, "r") as file:
            configs_dict = json.load(file)
            apply_configs(args, configs_dict)

    # Print them nicely
    logger = get_logger(__name__)
    logger.info(pprint.pformat(args))

    if args.save_args:
        out = osp.join(args.project_top_dir, args.project_name, "config.json.txt")
        with open(out, "w") as f_out:
            json.dump(vars(args), f_out, indent=4, sort_keys=True)

    return args


def apply_configs(args, config_dict):
    for k, v in config_dict.items():
        k = k.replace("-", "_")
        setattr(args, k, v)
